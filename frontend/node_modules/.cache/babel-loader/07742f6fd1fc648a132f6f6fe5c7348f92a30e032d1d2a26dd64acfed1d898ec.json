{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\iyip-platform-rai\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Configure axios defaults\naxios.defaults.baseURL = API_BASE_URL;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\n// Add token to requests if it exists\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on mount\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    if (token && storedUser) {\n      try {\n        const userData = JSON.parse(storedUser);\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Verify token is still valid\n        verifyToken(token);\n      } catch (error) {\n        console.error('Error parsing stored user data:', error);\n        logout();\n      }\n    }\n    setLoading(false);\n  }, []);\n  const verifyToken = async token => {\n    try {\n      // You can add an endpoint to verify token validity\n      const response = await axios.get('/auth/verify', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!response.data.valid) {\n        logout();\n      }\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      logout();\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('/auth/login', {\n        email,\n        password\n      });\n      const {\n        user: userData,\n        token\n      } = response.data;\n\n      // Store token and user data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(userData));\n\n      // Update state\n      setUser(userData);\n      setIsAuthenticated(true);\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      let message = 'Login failed. Please try again.';\n      if (error.response) {\n        var _error$response$data;\n        if (error.response.status === 401) {\n          message = 'Invalid email or password.';\n        } else if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n          message = error.response.data.message;\n        }\n      } else if (error.request) {\n        message = 'Cannot connect to server. Please check your connection.';\n      }\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await axios.post('/auth/register', userData);\n      return {\n        success: true,\n        message: 'Registration successful! Please login.'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data2, _error$response2;\n      console.error('Registration error:', error);\n      let message = 'Registration failed. Please try again.';\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data2 = _error$response.data) !== null && _error$response$data2 !== void 0 && _error$response$data2.message) {\n        message = error.response.data.message;\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400) {\n        message = 'Email or NIM already registered.';\n      }\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Clear axios default header\n    delete axios.defaults.headers.common['Authorization'];\n\n    // Update state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateUser = userData => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","API_BASE_URL","defaults","baseURL","headers","post","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","useAuth","context","Error","AuthProvider","children","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","storedUser","userData","JSON","parse","verifyToken","console","logout","response","get","data","valid","login","email","password","setItem","stringify","success","message","_error$response$data","status","register","_error$response","_error$response$data2","_error$response2","removeItem","common","updateUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Web/iyip-platform-rai/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Configure axios defaults\r\naxios.defaults.baseURL = API_BASE_URL;\r\naxios.defaults.headers.post['Content-Type'] = 'application/json';\r\n\r\n// Add token to requests if it exists\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Check if user is logged in on mount\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        const storedUser = localStorage.getItem('user');\r\n\r\n        if (token && storedUser) {\r\n            try {\r\n                const userData = JSON.parse(storedUser);\r\n                setUser(userData);\r\n                setIsAuthenticated(true);\r\n\r\n                // Verify token is still valid\r\n                verifyToken(token);\r\n            } catch (error) {\r\n                console.error('Error parsing stored user data:', error);\r\n                logout();\r\n            }\r\n        }\r\n\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const verifyToken = async (token) => {\r\n        try {\r\n            // You can add an endpoint to verify token validity\r\n            const response = await axios.get('/auth/verify', {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n\r\n            if (!response.data.valid) {\r\n                logout();\r\n            }\r\n        } catch (error) {\r\n            console.error('Token verification failed:', error);\r\n            logout();\r\n        }\r\n    };\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const response = await axios.post('/auth/login', {\r\n                email,\r\n                password\r\n            });\r\n\r\n            const { user: userData, token } = response.data;\r\n\r\n            // Store token and user data\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('user', JSON.stringify(userData));\r\n\r\n            // Update state\r\n            setUser(userData);\r\n            setIsAuthenticated(true);\r\n\r\n            return {\r\n                success: true,\r\n                user: userData\r\n            };\r\n        } catch (error) {\r\n            console.error('Login error:', error);\r\n\r\n            let message = 'Login failed. Please try again.';\r\n\r\n            if (error.response) {\r\n                if (error.response.status === 401) {\r\n                    message = 'Invalid email or password.';\r\n                } else if (error.response.data?.message) {\r\n                    message = error.response.data.message;\r\n                }\r\n            } else if (error.request) {\r\n                message = 'Cannot connect to server. Please check your connection.';\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                message\r\n            };\r\n        }\r\n    };\r\n\r\n    const register = async (userData) => {\r\n        try {\r\n            const response = await axios.post('/auth/register', userData);\r\n\r\n            return {\r\n                success: true,\r\n                message: 'Registration successful! Please login.'\r\n            };\r\n        } catch (error) {\r\n            console.error('Registration error:', error);\r\n\r\n            let message = 'Registration failed. Please try again.';\r\n\r\n            if (error.response?.data?.message) {\r\n                message = error.response.data.message;\r\n            } else if (error.response?.status === 400) {\r\n                message = 'Email or NIM already registered.';\r\n            }\r\n\r\n            return {\r\n                success: false,\r\n                message\r\n            };\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        // Clear localStorage\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n\r\n        // Clear axios default header\r\n        delete axios.defaults.headers.common['Authorization'];\r\n\r\n        // Update state\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    const updateUser = (userData) => {\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n    };\r\n\r\n    const value = {\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        updateUser\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}