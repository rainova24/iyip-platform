{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\iyip-platform-rai\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\";\n// frontend/src/context/AuthContext.jsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('token');\n    if (token) {\n      authService.setAuthToken(token);\n      getCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const getCurrentUser = async () => {\n    try {\n      const response = await authService.getCurrentUser();\n      setUser(response.data);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await authService.login(email, password);\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem('token', token);\n      authService.setAuthToken(token);\n      setUser(user);\n      setIsAuthenticated(true);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await authService.register(userData);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    authService.setAuthToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    getCurrentUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","token","localStorage","getItem","setAuthToken","getCurrentUser","response","data","error","console","logout","login","email","password","setItem","register","userData","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Web/iyip-platform-rai/frontend/src/context/AuthContext.jsx"],"sourcesContent":["// frontend/src/context/AuthContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport authService from '../services/authService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Check if user is logged in on app start\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            authService.setAuthToken(token);\r\n            getCurrentUser();\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const getCurrentUser = async () => {\r\n        try {\r\n            const response = await authService.getCurrentUser();\r\n            setUser(response.data);\r\n            setIsAuthenticated(true);\r\n        } catch (error) {\r\n            console.error('Error getting current user:', error);\r\n            logout();\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const response = await authService.login(email, password);\r\n            const { token, user } = response.data;\r\n\r\n            localStorage.setItem('token', token);\r\n            authService.setAuthToken(token);\r\n            setUser(user);\r\n            setIsAuthenticated(true);\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const register = async (userData) => {\r\n        try {\r\n            const response = await authService.register(userData);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        authService.setAuthToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    const value = {\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        getCurrentUser\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}