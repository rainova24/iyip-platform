{"ast":null,"code":"// src/services/authService.js\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Set auth token\nconst setAuthToken = token => {\n  if (token) {\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n  }\n};\n\n// Auth services\nconst authService = {\n  setAuthToken,\n  login: (email, password) => {\n    return api.post('/auth/login', {\n      email,\n      password\n    });\n  },\n  register: userData => {\n    return api.post('/auth/register', userData);\n  },\n  // User services\n  getCurrentUser: () => {\n    return api.get('/users/me');\n  },\n  // Journal services\n  getJournals: () => {\n    return api.get('/journals');\n  },\n  getMyJournals: () => {\n    return api.get('/journals/my');\n  },\n  createJournal: journalData => {\n    return api.post('/journals', journalData);\n  },\n  updateJournal: (id, journalData) => {\n    return api.put(`/journals/${id}`, journalData);\n  },\n  deleteJournal: id => {\n    return api.delete(`/journals/${id}`);\n  },\n  // Event services - Updated to match backend endpoints\n  getEvents: () => {\n    return api.get('/events');\n  },\n  getUpcomingEvents: () => {\n    // Backend doesn't have /upcoming endpoint, will filter on frontend\n    return api.get('/events');\n  },\n  getMyEvents: () => {\n    // Backend uses /events/my-events, but since it requires auth and we don't have it implemented,\n    // we'll return empty for now\n    return Promise.resolve({\n      data: {\n        success: true,\n        data: []\n      }\n    });\n  },\n  createEvent: eventData => {\n    return api.post('/events', eventData);\n  },\n  registerForEvent: eventId => {\n    return api.post(`/events/${eventId}/register`);\n  },\n  unregisterFromEvent: eventId => {\n    return api.delete(`/events/${eventId}/register`);\n  },\n  // Submission services\n  getSubmissions: () => {\n    return api.get('/submissions');\n  },\n  getMySubmissions: () => {\n    return api.get('/submissions/my');\n  },\n  createSubmission: submissionData => {\n    return api.post('/submissions', submissionData);\n  },\n  updateSubmissionStatus: (id, status) => {\n    return api.put(`/submissions/${id}/status`, {\n      status\n    });\n  },\n  // Community services - Updated to match backend endpoints\n  getCommunities: () => {\n    return api.get('/communities');\n  },\n  getMyCommunities: () => {\n    return api.get('/communities/my-communities');\n  },\n  joinCommunity: communityId => {\n    return api.post(`/communities/${communityId}/join`);\n  },\n  leaveCommunity: communityId => {\n    return api.delete(`/communities/${communityId}/leave`);\n  },\n  createCommunity: communityData => {\n    return api.post('/communities', communityData);\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","setAuthToken","token","defaults","common","authService","login","email","password","post","register","userData","getCurrentUser","get","getJournals","getMyJournals","createJournal","journalData","updateJournal","id","put","deleteJournal","delete","getEvents","getUpcomingEvents","getMyEvents","Promise","resolve","data","success","createEvent","eventData","registerForEvent","eventId","unregisterFromEvent","getSubmissions","getMySubmissions","createSubmission","submissionData","updateSubmissionStatus","status","getCommunities","getMyCommunities","joinCommunity","communityId","leaveCommunity","createCommunity","communityData"],"sources":["D:/Web/iyip-platform-rai/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Set auth token\r\nconst setAuthToken = (token) => {\r\n    if (token) {\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n        delete api.defaults.headers.common['Authorization'];\r\n    }\r\n};\r\n\r\n// Auth services\r\nconst authService = {\r\n    setAuthToken,\r\n\r\n    login: (email, password) => {\r\n        return api.post('/auth/login', { email, password });\r\n    },\r\n\r\n    register: (userData) => {\r\n        return api.post('/auth/register', userData);\r\n    },\r\n\r\n    // User services\r\n    getCurrentUser: () => {\r\n        return api.get('/users/me');\r\n    },\r\n\r\n    // Journal services\r\n    getJournals: () => {\r\n        return api.get('/journals');\r\n    },\r\n\r\n    getMyJournals: () => {\r\n        return api.get('/journals/my');\r\n    },\r\n\r\n    createJournal: (journalData) => {\r\n        return api.post('/journals', journalData);\r\n    },\r\n\r\n    updateJournal: (id, journalData) => {\r\n        return api.put(`/journals/${id}`, journalData);\r\n    },\r\n\r\n    deleteJournal: (id) => {\r\n        return api.delete(`/journals/${id}`);\r\n    },\r\n\r\n    // Event services - Updated to match backend endpoints\r\n    getEvents: () => {\r\n        return api.get('/events');\r\n    },\r\n\r\n    getUpcomingEvents: () => {\r\n        // Backend doesn't have /upcoming endpoint, will filter on frontend\r\n        return api.get('/events');\r\n    },\r\n\r\n    getMyEvents: () => {\r\n        // Backend uses /events/my-events, but since it requires auth and we don't have it implemented,\r\n        // we'll return empty for now\r\n        return Promise.resolve({ data: { success: true, data: [] } });\r\n    },\r\n\r\n    createEvent: (eventData) => {\r\n        return api.post('/events', eventData);\r\n    },\r\n\r\n    registerForEvent: (eventId) => {\r\n        return api.post(`/events/${eventId}/register`);\r\n    },\r\n\r\n    unregisterFromEvent: (eventId) => {\r\n        return api.delete(`/events/${eventId}/register`);\r\n    },\r\n\r\n    // Submission services\r\n    getSubmissions: () => {\r\n        return api.get('/submissions');\r\n    },\r\n\r\n    getMySubmissions: () => {\r\n        return api.get('/submissions/my');\r\n    },\r\n\r\n    createSubmission: (submissionData) => {\r\n        return api.post('/submissions', submissionData);\r\n    },\r\n\r\n    updateSubmissionStatus: (id, status) => {\r\n        return api.put(`/submissions/${id}/status`, { status });\r\n    },\r\n\r\n    // Community services - Updated to match backend endpoints\r\n    getCommunities: () => {\r\n        return api.get('/communities');\r\n    },\r\n\r\n    getMyCommunities: () => {\r\n        return api.get('/communities/my-communities');\r\n    },\r\n\r\n    joinCommunity: (communityId) => {\r\n        return api.post(`/communities/${communityId}/join`);\r\n    },\r\n\r\n    leaveCommunity: (communityId) => {\r\n        return api.delete(`/communities/${communityId}/leave`);\r\n    },\r\n\r\n    createCommunity: (communityData) => {\r\n        return api.post('/communities', communityData);\r\n    }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}