{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\iyip-platform-rai\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\";\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport authService from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData);\n        setUser(parsedUser);\n        setIsAuthenticated(true);\n        authService.setAuthToken(token);\n      } catch (error) {\n        console.error('Error parsing user data:', error);\n        logout();\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await authService.login(email, password);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // Store token and user data\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Set auth token for future requests\n      authService.setAuthToken(token);\n      setUser(user);\n      setIsAuthenticated(true);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await authService.register(userData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Register error:', error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    authService.setAuthToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","token","localStorage","getItem","userData","parsedUser","JSON","parse","setAuthToken","error","console","logout","login","email","password","response","data","setItem","stringify","success","_error$response","_error$response$data","message","register","_error$response2","_error$response2$data","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Web/iyip-platform-rai/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport authService from '../services/authService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Check if user is logged in on app start\r\n        const token = localStorage.getItem('token');\r\n        const userData = localStorage.getItem('user');\r\n\r\n        if (token && userData) {\r\n            try {\r\n                const parsedUser = JSON.parse(userData);\r\n                setUser(parsedUser);\r\n                setIsAuthenticated(true);\r\n                authService.setAuthToken(token);\r\n            } catch (error) {\r\n                console.error('Error parsing user data:', error);\r\n                logout();\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const response = await authService.login(email, password);\r\n            const { token, user } = response.data;\r\n\r\n            // Store token and user data\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n\r\n            // Set auth token for future requests\r\n            authService.setAuthToken(token);\r\n\r\n            setUser(user);\r\n            setIsAuthenticated(true);\r\n\r\n            return { success: true, user };\r\n        } catch (error) {\r\n            console.error('Login error:', error);\r\n            return {\r\n                success: false,\r\n                message: error.response?.data?.message || 'Login failed'\r\n            };\r\n        }\r\n    };\r\n\r\n    const register = async (userData) => {\r\n        try {\r\n            const response = await authService.register(userData);\r\n            return { success: true, data: response.data };\r\n        } catch (error) {\r\n            console.error('Register error:', error);\r\n            return {\r\n                success: false,\r\n                message: error.response?.data?.message || 'Registration failed'\r\n            };\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        authService.setAuthToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    const value = {\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}